c
post_params
c
UserAgent
request.user_agent
request
res.body
c
res.body
c
request.env
request
session
c
session
c
request.env["HTTP_REFERER"].include? request.env["HTTP_HOST"]
"ab".include? "a"
request.env["HTTP_HOST"].include? request.env["HTTP_REFERER"]
request.env["HTTP_HOST"].include? request.env["HTTP_REFERRER"]
request.env["HTTP_HOST"].includes? request.env["HTTP_REFERRER"]
request.env["HTTP_HOST"]
request.base_url
self
request.base_url
request.env
request.headers.methods
request.headers.req
request.headers.referrer
request.headers
request
c
request.env.fetch("action_controller.csrf_token")
request.env.fetch("dfd")
request.env.fetch(1)
request.env.fetch
request.env
request.env.fetch(C"hello")
request.env.fetch(C"DFDF")
request.env.fetch(CSRF_TOKEN)
request_forgery_protection_token
params[request_forgery_protection_token]
params
session.enabled?
session.enable?
request.env["action_controller.csrf_token"]
request.env
request
session[:_csrf_token]
session
self
self.class
SessionStore
c
SessionStore.speak
SessionStore.new
SessionStore
request.base_url
request.origin
c
request.base_url
request.origin.nil?
request.origin
request.get_header "method"
request
request.get_header :method
request.get_header :title
request.get_header :cookie
request.get_header 1
request.get_header
request.get_headers
request.client_ip
request.client_id
request.remote_ip
request.server_protocol
request.server_name
request.request_method
request.body
request.methods
request.attributes
request.origin
request.headers
request
rquest
c
params["authenticity_token"]
params
c
headers
action_name
action
params
request
headers
params
c
post_params
post_params['body'] =sanitize( post_params['body'])
post_params
params
c
params
c
params
c
params
c
params["id"]
params
